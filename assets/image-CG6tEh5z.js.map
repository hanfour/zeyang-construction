{"version":3,"file":"image-CG6tEh5z.js","sources":["../../src/utils/image.ts"],"sourcesContent":["/**\n * Image utility functions for handling image URLs and paths\n */\n\nconst IMAGE_BASE_URL = import.meta.env.VITE_IMAGE_BASE_URL || 'http://localhost:5001/uploads';\n\n/**\n * Convert relative image path to full URL\n * @param relativePath - Relative path from database (e.g., \"projects/uuid/filename.webp\")\n * @returns Full image URL\n */\nexport const getImageUrl = (relativePath: string): string => {\n  if (!relativePath) {\n    return '';\n  }\n  \n  // If path is already absolute, return as-is\n  if (relativePath.startsWith('http')) {\n    return relativePath;\n  }\n  \n  // Remove leading slash if present\n  const cleanPath = relativePath.startsWith('/') ? relativePath.slice(1) : relativePath;\n  \n  return `${IMAGE_BASE_URL}/${cleanPath}`;\n};\n\n/**\n * Get optimized image URL from ProjectImage thumbnails\n * @param image - ProjectImage object\n * @param size - Preferred size (thumbnail, small, medium, large, optimized)\n * @returns Full image URL for the requested size, fallback to original if size not available\n */\nexport const getOptimizedImageUrl = (\n  image: { file_path: string; thumbnails?: any }, \n  size: 'thumbnail' | 'small' | 'medium' | 'large' | 'optimized' = 'optimized'\n): string => {\n  // Try to get the requested size from thumbnails\n  if (image.thumbnails && image.thumbnails[size]?.path) {\n    return getImageUrl(image.thumbnails[size].path);\n  }\n  \n  // Fallback to original file_path\n  return getImageUrl(image.file_path);\n};\n\n/**\n * Get thumbnail URL for image preview\n * @param image - ProjectImage object\n * @returns Thumbnail URL\n */\nexport const getThumbnailUrl = (image: { file_path: string; thumbnails?: any }): string => {\n  return getOptimizedImageUrl(image, 'thumbnail');\n};\n\n/**\n * Get medium size image URL for gallery display\n * @param image - ProjectImage object  \n * @returns Medium size image URL\n */\nexport const getMediumImageUrl = (image: { file_path: string; thumbnails?: any }): string => {\n  return getOptimizedImageUrl(image, 'medium');\n};\n\n/**\n * Check if image URL is valid (not empty)\n * @param url - Image URL to check\n * @returns Whether URL is valid\n */\nexport const isValidImageUrl = (url: string): boolean => {\n  return Boolean(url && url.trim().length > 0);\n};\n\n/**\n * Get placeholder image URL for when no image is available\n * @returns Placeholder image URL\n */\nexport const getPlaceholderImageUrl = (): string => {\n  return '/images/placeholder.jpg'; // Assumes placeholder image in public folder\n};"],"names":["IMAGE_BASE_URL","getImageUrl","relativePath","cleanPath","getOptimizedImageUrl","image","size","_a","getMediumImageUrl"],"mappings":"AAIA,MAAMA,EAAwD,gCAOjDC,EAAeC,GAAiC,CAC3D,GAAI,CAACA,EACH,MAAO,GAIT,GAAIA,EAAa,WAAW,MAAM,EAChC,OAAOA,EAIT,MAAMC,EAAYD,EAAa,WAAW,GAAG,EAAIA,EAAa,MAAM,CAAC,EAAIA,EAEzE,MAAO,GAAGF,CAAc,IAAIG,CAAS,EACvC,EAQaC,EAAuB,CAClCC,EACAC,EAAiE,cACtD,CAhCb,IAAAC,EAkCE,OAAIF,EAAM,cAAcE,EAAAF,EAAM,WAAWC,CAAI,IAArB,MAAAC,EAAwB,MACvCN,EAAYI,EAAM,WAAWC,CAAI,EAAE,IAAI,EAIzCL,EAAYI,EAAM,SAAS,CACpC,EAgBaG,EAAqBH,GACzBD,EAAqBC,EAAO,QAAQ"}